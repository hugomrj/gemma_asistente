import datetime
import os
import re # Necesario para b√∫squeda por caracter√≠sticas m√°s flexible

# -------------------------------------------------------------------
# DEFINICI√ìN DEL PROMPT Y PALABRAS CLAVE
# -------------------------------------------------------------------

def pregunta_con_contexto(pregunta, historial) -> str:
    """
    Crea un prompt optimizado para un asistente virtual especializado en ventas,
    siguiendo las mejores pr√°cticas de contexto, claridad y tono persuasivo y amable.
    """
    historial = f"\nHistorial de la conversaci√≥n:\n{historial}" if historial else "No hay historial disponible."
    condiciones_dinamicas = generar_condiciones_dinamicas(pregunta)
    if condiciones_dinamicas.strip():
        condiciones_dinamicas = "\nüß† **Informaci√≥n relevante encontrada para tu consulta:**\n" + condiciones_dinamicas # Mensaje m√°s claro
    prompt = f"""
## Rol del Asistente:
Eres un asistente virtual especializado en **ventas** para Comercial Nova. Tu misi√≥n es ayudar a los clientes a elegir productos o servicios adecuados, brindar informaci√≥n clara y √∫til sobre precios, promociones, formas de pago, disponibilidad y beneficios, adem√°s de guiarlos paso a paso durante el proceso de compra. Tambi√©n brind√°s atenci√≥n post-venta para asegurar la satisfacci√≥n del cliente.

Instrucciones:
1. **Tono Profesional, Cercano y Persuasivo:**
   - "Si el usuario inicia con un saludo (ej: 'hola'), responde con un saludo amable. En otros casos, ve directo al tema."
   - Solo salud√° si la **pregunta actual** no contiene palabras de saludo.
   - Ayuda al cliente a sentirse seguro con su compra.
   - Si el cliente tiene dudas, expl√≠calas con paciencia y seguridad, buscando cerrar la venta sin ser insistente.

2. **Informaci√≥n sobre Productos y Servicios:**
   - Brinda detalles sobre productos: caracter√≠sticas, beneficios, precios, disponibilidad, formas de pago, promociones y garant√≠as.
   - Ofrec√© recomendaciones personalizadas seg√∫n lo que el cliente necesita o est√° buscando. Basado en el historial y la pregunta actual.

3. **Proceso de Compra:**
   - Gui√° al cliente en los pasos para comprar: c√≥mo hacerlo, qu√© opciones tiene y c√≥mo confirmar su compra.
   - Si el cliente tiene dificultades, resolv√©las de forma simple y directa.

4. **Promociones y Descuentos:**
   - Inform√° sobre cualquier promoci√≥n activa, cupones, combos o descuentos relevantes a la consulta.
   - Aprovech√° las oportunidades para sugerir productos complementarios o de mayor valor (upselling/cross-selling) si es pertinente.

5. **Atenci√≥n Post-Venta:**
   - Inform√° sobre tiempos de entrega, seguimiento de pedidos, cambios o devoluciones si lo solicita.
   - Consult√° si qued√≥ conforme con su compra y ofrec√© asistencia adicional si es necesario.

6. **Escalaci√≥n si es Necesario:**
   - Si el cliente tiene una consulta muy espec√≠fica que no puedes resolver (ej: stock en tiempo real en una sucursal espec√≠fica, problema t√©cnico complejo) o requiere atenci√≥n humana, inform√° que vas a escalar su caso y derivarlo al equipo adecuado.

7. **Detecta emociones o indecisi√≥n:**
   - Si notas que el cliente est√° dudando o frustrado (palabras como "no s√©", "caro", "duda", "complicado"), tranquil√≠zalo, valida su sentir y ofr√©cele alternativas, beneficios adicionales o explica mejor el valor del producto.

8. **Al finalizar, pide feedback:**
   - Pregunta amablemente si la atenci√≥n fue √∫til y si hay algo m√°s en lo que puedas ayudar.

{condiciones_dinamicas}
{historial}

Pregunta actual:
{pregunta}

Notas adicionales:
- Si la consulta es sobre un tipo de producto (ej: "celulares", "notebooks"), muestra los productos disponibles de esa categor√≠a con sus detalles clave (precio, caracter√≠sticas principales).
- Si el cliente est√° listo para comprar, gui√° el proceso de cierre de venta.
- Si el cliente no sabe qu√© quiere, ayudalo a decidir con preguntas breves ("¬øQu√© uso le dar√≠as?", "¬øQu√© presupuesto tienes?") o sugerencias basadas en productos populares.
- Siempre agradec√© su inter√©s y ofrec√© ayuda adicional antes de terminar.
- Si el cliente ya compr√≥ (basado en historial), consult√° si qued√≥ conforme y ofrec√© productos relacionados o soporte.
**Max_token:**
- 200
    """

    guardar_prompt_log(prompt.strip())

    return prompt.strip()







# Bloques de palabras clave (podr√≠an estar en un archivo aparte como constants.py)
PALABRAS_CLAVE = {
    "promocion": {"promoci√≥n", "oferta", "ofertas", "descuento", "cup√≥n", "rebaja", "promo"},
    "politicas": {"garant√≠a", "devoluci√≥n", "reembolso", "cambio", "entrega", "env√≠o", "pol√≠tica", "instalaci√≥n"},
    "precio": {"precio", "precios", "cu√°nto cuesta", "valor", "cost√≥", "cuanto sale", "cotizaci√≥n"},
    "caracteristicas": {
        # Generales
        "c√°mara", "bater√≠a", "almacenamiento", "color", "pantalla", "ram", "procesador", "tama√±o", "memoria",
        # Espec√≠ficas TV/Monitor
        "resoluci√≥n", "pulgadas", "hz", "hercios", "oled", "qled", "hdmi",
        # Espec√≠ficas Audio
        "bluetooth", "cancelaci√≥n", "ruido", "inal√°mbrico", "potencia", "watts",
        # Espec√≠ficas Smartwatch
        "gps", "resistencia", "agua", "cardiaco", "ecg", "ox√≠geno",
        # Espec√≠ficas Consola
        "juegos", "fps", "disco", "ssd", "gr√°ficos", "teraflops"
    },
    "categorias": {
        "celular", "celulares", "tel√©fono", "m√≥vil",
        "notebook", "notebooks", "laptop", "port√°til",
        "tablet", "tablets", "tableta",
        "accesorio", "accesorios", "auriculares", "cargador", "funda", "teclado", "mouse",
        "smartwatch", "reloj", "relojes",
        "consola", "consolas", "videojuego", "videojuegos", "playstation", "xbox", "nintendo",
        "tv", "televisor", "televisores", "tele", "pantalla",
        "audio", "sonido", "parlante", "altavoz", "auricular", "barra"
     }
}

def generar_condiciones_dinamicas(pregunta: str) -> str:
    """Genera texto con informaci√≥n relevante basado en las palabras clave detectadas en la pregunta."""
    condiciones = []
    pregunta_lower = pregunta.lower()

    # 1. Detecci√≥n m√°s eficiente usando conjuntos
    palabras_en_pregunta = set(re.findall(r'\b\w+\b', pregunta_lower)) # Extrae palabras individuales

    # 2. Manejo de promociones optimizado
    if PALABRAS_CLAVE["promocion"] & palabras_en_pregunta:
        promos = obtener_promociones_actuales()
        # Filtrar promos activas (opcional, si la fecha es relevante)
        # from datetime import datetime
        # hoy = datetime.now().strftime("%d/%m/%Y")
        # promos_activas = [p for p in promos if p['valido_hasta'] >= hoy] # Simplificado, cuidado con formato fecha
        promos_texto = "\n".join([
            f"‚Ä¢ üéÅ **{p['nombre']}**: {p['detalle']} (V√°lido hasta: {p['valido_hasta']})"
            for p in promos # Usar promos_activas si se filtra
        ])
        if promos_texto:
             condiciones.append(f"üì¢ **Promociones vigentes:**\n{promos_texto}")
        else:
             condiciones.append("üì¢ No tenemos promociones especiales activas en este momento, pero nuestros precios son muy competitivos.")

    # 3. Manejo de pol√≠ticas con detecci√≥n mejorada
    palabras_politica_encontradas = PALABRAS_CLAVE["politicas"] & palabras_en_pregunta
    if palabras_politica_encontradas:
        politicas = obtener_politicas_completas()
        politicas_texto = "\n".join([
            # Muestra solo las pol√≠ticas mencionadas o todas si es gen√©rico ("pol√≠tica")
            f"‚Ä¢ üîß **{key.capitalize()}**: {value}"
            for key, value in politicas.items() if key in palabras_politica_encontradas or "pol√≠tica" in palabras_politica_encontradas
        ])
        condiciones.append(f"üìú **Informaci√≥n sobre pol√≠ticas ({', '.join(p.capitalize() for p in palabras_politica_encontradas)}):**\n{politicas_texto}")

    # 4. B√∫squeda por categor√≠a optimizada (ESTA ES LA CLAVE PARA TU REQUERIMIENTO)
    #   Usamos intersecci√≥n para ver qu√© categor√≠as de nuestra lista est√°n en la pregunta
    categorias_solicitadas = PALABRAS_CLAVE["categorias"] & palabras_en_pregunta
    catalogo = None # Cargar solo si es necesario

    if categorias_solicitadas:
        if catalogo is None: catalogo = obtener_catalogo_completo()
        for categoria_keyword in categorias_solicitadas:
            # Mapear palabra clave a nombre de categor√≠a real en el cat√°logo (ej: "celulares" -> "celular")
            categoria_real = next((cat for cat, data in catalogo.items() if categoria_keyword in PALABRAS_CLAVE["categorias"] and categoria_keyword in cat or cat in categoria_keyword), None)
            # Intento adicional por si la palabra clave es parte del nombre de la categor√≠a (ej: "playstation" -> "consola")
            if not categoria_real:
                 categoria_real = next((cat for cat, data in catalogo.items() if categoria_keyword in cat), None)

            if categoria_real and categoria_real in catalogo:
                productos_texto = generar_info_productos(catalogo[categoria_real])
                if productos_texto:
                    condiciones.append(f" B√∫squeda por Categor√≠a: **{categoria_real.capitalize()}** \n{productos_texto}")
                else:
                     condiciones.append(f" No encontr√© productos espec√≠ficos en la categor√≠a '{categoria_real.capitalize()}' en este momento.")
            #else:
            #    print(f"Debug: No se encontr√≥ mapeo para keyword '{categoria_keyword}'") # Para depuraci√≥n

    # 5. B√∫squeda por precio m√°s precisa
    if PALABRAS_CLAVE["precio"] & palabras_en_pregunta:
        if catalogo is None: catalogo = obtener_catalogo_completo()
        if categorias_solicitadas: # Si ya se pidi√≥ categor√≠a, mostrar precios de esa
             for categoria_real in {cat for cat_key in categorias_solicitadas
                                   for cat, data in catalogo.items()
                                   if cat_key in PALABRAS_CLAVE["categorias"] and (cat_key in cat or cat in cat_key)}:
                if categoria_real in catalogo:
                    precios_texto = "\n".join([
                        f"‚Ä¢ {prod['nombre']}: {prod['precio_usd']:.2f} USD / {prod['precio_gs']:,.0f} Gs".replace(",",".") # Formato mejorado
                        for prod in catalogo[categoria_real]
                    ])
                    condiciones.append(f" **Precios en {categoria_real.capitalize()}:**\n{precios_texto}")
        else: # Si solo se pide precio sin categor√≠a, mostrar algunos ejemplos o pedir aclaraci√≥n
             condiciones.append(" Sobre qu√© categor√≠a o producto te gustar√≠a saber el precio? Tenemos celulares, notebooks, TVs y m√°s.")


    # 6. B√∫squeda por caracter√≠sticas optimizada
    caracteristicas_solicitadas = PALABRAS_CLAVE["caracteristicas"] & palabras_en_pregunta
    if caracteristicas_solicitadas:
        if catalogo is None: catalogo = obtener_catalogo_completo()
        # Pasar las caracter√≠sticas detectadas a la funci√≥n de b√∫squeda
        resultados = buscar_por_caracteristicas(pregunta_lower, caracteristicas_solicitadas, catalogo)
        if resultados:
            condiciones.append(f" **Productos relacionados con '{', '.join(caracteristicas_solicitadas)}':**\n{resultados}")
        else:
            condiciones.append(f" No encontr√© productos que coincidan espec√≠ficamente con las caracter√≠sticas '{', '.join(caracteristicas_solicitadas)}'. ¬øPodr√≠as darme m√°s detalles?")


    # 7. B√∫squeda de productos espec√≠ficos (por nombre)
    #    Lista de nombres de productos comunes para b√∫squeda r√°pida
    nombres_productos_comunes = {"iphone", "galaxy", "macbook", "ipad", "airpods", "ps5", "playstation 5", "xbox series", "apple watch", "galaxy watch"}
    palabras_producto_detectadas = {palabra for palabra in nombres_productos_comunes if palabra in pregunta_lower}

    if palabras_producto_detectadas:
         if catalogo is None: catalogo = obtener_catalogo_completo()
         productos_encontrados_texto = []
         for categoria, productos in catalogo.items():
             for prod in productos:
                 nombre_prod_lower = prod['nombre'].lower()
                 # Comprobar si alguna palabra detectada est√° en el nombre del producto
                 if any(palabra_detectada in nombre_prod_lower for palabra_detectada in palabras_producto_detectadas):
                     precio_gs_f = f"{prod['precio_gs']:,.0f}".replace(",", ".")
                     producto_detalle = (
                         f"üìå **{prod['nombre']}** ({categoria.capitalize()})\n"
                         f"   üíµ Precio: ${prod['precio_usd']:.2f}$ USD / ${precio_gs_f}$ Gs\n"
                         f"   üé® Colores disponibles: {', '.join(prod['colores'])}\n"
                         f"   üíæ Almacenamiento: {', '.join(prod.get('almacenamiento', ['N/D']))}\n"
                         f"   ‚öôÔ∏è Destacado: {'; '.join(prod['caracteristicas'][:3])}..." # Primeras 3 caracter√≠sticas
                     )
                     productos_encontrados_texto.append(producto_detalle)

         if productos_encontrados_texto:
             condiciones.append(f" **Informaci√≥n sobre productos espec√≠ficos mencionados:**\n" + "\n\n".join(productos_encontrados_texto))


    # 8. Caso gen√©rico "productos" (si no se activ√≥ nada m√°s espec√≠fico)
    #    Se activa si se dice "productos" pero no una categor√≠a o nombre espec√≠fico.
    if not categorias_solicitadas and not palabras_producto_detectadas and not caracteristicas_solicitadas and any(p in pregunta_lower for p in ["producto", "productos", "art√≠culo", "art√≠culos", "item", "items"]):
         if catalogo is None: catalogo = obtener_catalogo_completo()
         condiciones.append(" Tenemos una gran variedad de productos electr√≥nicos. ¬øTe interesa alguna categor√≠a en particular como celulares, notebooks, TVs, consolas, audio o accesorios?")


    return "\n\n".join(condiciones) if condiciones else ""


# -------------------------------------------------------------------
# M√ìDULO DE DATOS (Considera mover a un archivo JSON si crece mucho)
# -------------------------------------------------------------------
def obtener_politicas_completas():
    """Devuelve un diccionario con las pol√≠ticas de la tienda."""
    return {
        "garantia": "12 meses contra defectos de f√°brica en la mayor√≠a de los productos. Notebooks y TVs pueden tener garant√≠a extendida del fabricante (consultar modelo).",
        "devolucion": "10 d√≠as corridos desde la compra para devoluciones si el producto est√° sin uso, en su empaque original sellado y con factura.",
        "cambio": "30 d√≠as para cambios por otro producto (aplican condiciones de devoluci√≥n). Si hay diferencia de precio, se ajusta.",
        "reembolso": "Se procesa dentro de los 7 d√≠as h√°biles posteriores a la aceptaci√≥n de la devoluci√≥n, por el mismo medio de pago original.",
        "entrega": "Env√≠o est√°ndar 24-72hs h√°biles en Asunci√≥n y Gran Asunci√≥n (costo seg√∫n zona, gratis para compras > 1.500.000 Gs). Env√≠os al interior v√≠a transportadora (costo a cargo del cliente).",
        "instalaci√≥n": "Ofrecemos servicio de instalaci√≥n b√°sica para TVs y configuraci√≥n inicial para notebooks con costo adicional (consultar precios)."
    }

def obtener_promociones_actuales():
    """Devuelve una lista de diccionarios con promociones vigentes."""
    # Aseg√∫rate de mantener estas fechas actualizadas o implementar l√≥gica para filtrar
    return [
        {
            "nombre": "TecnoFest Verano",
            "detalle": "Hasta 25% de descuento en Smartphones seleccionados y 12 cuotas sin inter√©s con bancos asociados.",
            "valido_hasta": "31/05/2025" # Ejemplo: Usar formato AAAA-MM-DD para facilitar comparaci√≥n
        },
        {
            "nombre": "Vuelta al Cole Tech",
            "detalle": "Notebooks y Tablets con 10% OFF + Mochila de regalo en modelos seleccionados.",
            "valido_hasta": "15/03/2025" # Ejemplo pasado
        },
        {
            "nombre": "Combo Gamer Pro",
            "detalle": "Lleva una Consola PS5 + Juego de lanzamiento + Auriculares Gamer con 1.000.000 Gs de ahorro.",
            "valido_hasta": "30/04/2025"
        },
         {
            "nombre": "Audio Inmersivo",
            "detalle": "20% de descuento en Barras de Sonido y Auriculares con cancelaci√≥n de ruido.",
            "valido_hasta": "15/05/2025"
        }
    ]

def obtener_catalogo_completo():
    """Devuelve el cat√°logo completo de productos por categor√≠a."""
    USD_TO_GS = 7450  # Actualizar tipo de cambio peri√≥dicamente

    return {
        "celular": [
            {
                "nombre": "iPhone 16 Pro", # Modelo hipot√©tico futuro
                "precio_usd": 1199, "precio_gs": 1199 * USD_TO_GS,
                "colores": ["Titanio Natural", "Titanio Azul", "Titanio Blanco", "Titanio Negro"],
                "almacenamiento": ["128GB", "256GB", "512GB", "1TB"],
                "caracteristicas": ["Chip A18 Pro", "Pantalla Super Retina XDR ProMotion", "Sistema de c√°maras Pro avanzado 48MP", "Bot√≥n de Acci√≥n configurable", "USB-C Thunderbolt"]
            },
            {
                "nombre": "iPhone 16", # Modelo hipot√©tico futuro
                "precio_usd": 899, "precio_gs": 899 * USD_TO_GS,
                "colores": ["Azul", "Rosa", "Verde", "Negro", "Blanco"],
                "almacenamiento": ["128GB", "256GB", "512GB"],
                "caracteristicas": ["Chip A17 (mejorado)", "Pantalla Super Retina XDR", "C√°mara dual 48MP", "Dynamic Island", "USB-C"]
            },
            {
                "nombre": "Samsung Galaxy S25 Ultra", # Modelo hipot√©tico futuro
                "precio_usd": 1299, "precio_gs": 1299 * USD_TO_GS,
                "colores": ["Phantom Black", "Phantom Silver", "Emerald Green", "Sapphire Blue"],
                "almacenamiento": ["256GB", "512GB", "1TB"],
                "caracteristicas": ["Pantalla Dynamic AMOLED 3X 120Hz", "Procesador Snapdragon Gen 4 for Galaxy", "C√°mara principal 200MP con IA", "S-Pen integrado", "Bater√≠a 5500mAh"]
            },
             {
                "nombre": "Samsung Galaxy A56", # Modelo hipot√©tico futuro
                "precio_usd": 450, "precio_gs": 450 * USD_TO_GS,
                "colores": ["Awesome Black", "Awesome White", "Awesome Blue"],
                "almacenamiento": ["128GB", "256GB"],
                "caracteristicas": ["Pantalla Super AMOLED 120Hz", "C√°mara 64MP OIS", "Bater√≠a 5000mAh", "Resistencia IP67", "Procesador Exynos eficiente"]
            },
            {
                "nombre": "Xiaomi 15 Pro", # Modelo hipot√©tico futuro
                "precio_usd": 950, "precio_gs": 950 * USD_TO_GS,
                "colores": ["Negro Cer√°mico", "Blanco Nieve", "Verde Bosque"],
                "almacenamiento": ["256GB", "512GB"],
                "caracteristicas": ["Sensor de c√°mara 1 pulgada", "Lentes Leica Summilux", "Pantalla LTPO AMOLED 144Hz", "Carga r√°pida 120W", "Snapdragon Gen 4"]
            }
        ],
        "notebook": [
            {
                "nombre": "MacBook Air 13\" M3",
                "precio_usd": 1099, "precio_gs": 1099 * USD_TO_GS,
                "colores": ["Medianoche", "Blanco estelar", "Gris espacial", "Plata"],
                "almacenamiento": ["256GB SSD", "512GB SSD"], "ram": ["8GB", "16GB"],
                "caracteristicas": ["Chip M3 Apple Silicon", "Pantalla Liquid Retina 13.6\"", "Hasta 18h de bater√≠a", "Dise√±o ultra delgado y ligero", "Magic Keyboard"]
            },
            {
                "nombre": "MacBook Pro 14\" M3 Pro",
                "precio_usd": 1999, "precio_gs": 1999 * USD_TO_GS,
                "colores": ["Negro espacial", "Plata"],
                "almacenamiento": ["512GB SSD", "1TB SSD"], "ram": ["18GB", "36GB"],
                "caracteristicas": ["Chip M3 Pro Apple Silicon", "Pantalla Liquid Retina XDR 14.2\"", "Rendimiento extremo para profesionales", "Sistema de sonido avanzado", "Puertos Pro (HDMI, SDXC)"]
            },
            {
                "nombre": "Dell XPS 15 (Modelo 9540)", # Modelo hipot√©tico
                "precio_usd": 1650, "precio_gs": 1650 * USD_TO_GS,
                "colores": ["Platino", "Grafito"],
                "almacenamiento": ["512GB SSD", "1TB SSD", "2TB SSD"], "ram": ["16GB", "32GB", "64GB"],
                "caracteristicas": ["Procesador Intel Core Ultra 7/9", "Pantalla InfinityEdge OLED 3.5K t√°ctil (opcional)", "Gr√°ficos NVIDIA GeForce RTX 4050/4060 (opcional)", "Chasis de aluminio premium", "Windows 11 Pro"]
            },
             {
                "nombre": "HP Spectre x360 14 (2025)", # Modelo hipot√©tico
                "precio_usd": 1400, "precio_gs": 1400 * USD_TO_GS,
                "colores": ["Nightfall Black", "Poseidon Blue"],
                "almacenamiento": ["512GB SSD", "1TB SSD"], "ram": ["16GB", "32GB"],
                "caracteristicas": ["Dise√±o convertible 2-en-1", "Pantalla OLED 2.8K 120Hz", "Procesador Intel Core Ultra 7", "L√°piz √≥ptico incluido", "C√°mara IA 5MP IR"]
            }
        ],
        "tablet": [
            {
                "nombre": "iPad Pro 11\" M3", # Modelo hipot√©tico
                "precio_usd": 999, "precio_gs": 999 * USD_TO_GS,
                "colores": ["Plata", "Gris espacial"],
                "almacenamiento": ["128GB", "256GB", "512GB", "1TB", "2TB"],
                "caracteristicas": ["Chip M3 Apple Silicon", "Pantalla Ultra Retina XDR (OLED)", "Dise√±o m√°s delgado", "Apple Pencil Pro compatible", "Face ID"]
            },
             {
                "nombre": "iPad Air 13\" M2",
                "precio_usd": 799, "precio_gs": 799 * USD_TO_GS,
                "colores": ["Azul", "P√∫rpura", "Blanco estelar", "Gris espacial"],
                "almacenamiento": ["128GB", "256GB", "512GB", "1TB"],
                "caracteristicas": ["Chip M2 Apple Silicon", "Pantalla Liquid Retina 13\"", "Apple Pencil Pro compatible", "Touch ID en bot√≥n superior", "C√°mara frontal horizontal"]
            },
            {
                "nombre": "Samsung Galaxy Tab S10 Ultra", # Modelo hipot√©tico
                "precio_usd": 1100, "precio_gs": 1100 * USD_TO_GS,
                "colores": ["Beige", "Grafito"],
                "almacenamiento": ["256GB", "512GB", "1TB"], "ram": ["12GB", "16GB"],
                "caracteristicas": ["Pantalla Dynamic AMOLED 2X 14.6\"", "Procesador Snapdragon Gen 4 for Galaxy", "S-Pen incluido (baja latencia)", "Resistencia IP68", "Samsung DeX mejorado"]
            }
        ],
         "smartwatch": [
            {
                "nombre": "Apple Watch Series 10", # Modelo hipot√©tico
                "precio_usd": 399, "precio_gs": 399 * USD_TO_GS,
                "colores": ["Aluminio: Medianoche, Blanco Estelar, Plata, Rojo (Product)RED", "Acero: Grafito, Oro, Plata"],
                "tama√±o": ["41mm", "45mm"],
                "caracteristicas": ["Nuevo dise√±o (posiblemente m√°s delgado)", "Sensor de presi√≥n arterial (rumoreado)", "Detecci√≥n de apnea del sue√±o (rumoreado)", "Chip S10 m√°s r√°pido", "watchOS 11"]
            },
             {
                "nombre": "Apple Watch Ultra 3", # Modelo hipot√©tico
                "precio_usd": 799, "precio_gs": 799 * USD_TO_GS,
                "colores": ["Titanio natural (nuevos acabados posibles)"],
                "tama√±o": ["49mm"],
                "caracteristicas": ["Chip S10", "Pantalla MicroLED (rumoreado, podr√≠a retrasarse)", "Mayor duraci√≥n de bater√≠a", "Funciones avanzadas para deportes extremos", "Resistencia grado militar"]
             },
             {
                "nombre": "Samsung Galaxy Watch 7 Pro", # Modelo hipot√©tico
                "precio_usd": 449, "precio_gs": 449 * USD_TO_GS,
                "colores": ["Negro Titanio", "Gris Titanio"],
                "tama√±o": ["47mm"],
                "caracteristicas": ["Wear OS Powered by Samsung", "Nuevo procesador Exynos W1000 (rumoreado)", "Sensor BioActive (ECG, Presi√≥n Arterial, Composici√≥n Corporal)", "Bater√≠a de larga duraci√≥n (hasta 80h)", "Bisel giratorio (posiblemente solo en Classic)"]
             }
        ],
        "consola": [
            {
                "nombre": "PlayStation 5 Slim (PS5 Slim)",
                "precio_usd": 499, "precio_gs": 499 * USD_TO_GS,
                "colores": ["Blanco/Negro"],
                "almacenamiento": ["1TB SSD (√∫til ~825GB)"],
                "caracteristicas": ["Dise√±o m√°s compacto", "Lector de discos Blu-ray Ultra HD (extra√≠ble en versi√≥n digital)", "CPU AMD Zen 2 8-core", "GPU AMD RDNA 2 (10.3 TFLOPS)", "Audio 3D TempestTech", "Retrocompatible con PS4"]
            },
            {
                "nombre": "Xbox Series X",
                "precio_usd": 499, "precio_gs": 499 * USD_TO_GS,
                "colores": ["Negro"],
                "almacenamiento": ["1TB NVMe SSD (√∫til ~802GB)"],
                "caracteristicas": ["La consola m√°s potente (12 TFLOPS)", "CPU AMD Zen 2 8-core", "GPU AMD RDNA 2", "Quick Resume", "Xbox Game Pass (requiere suscripci√≥n)", "Retrocompatible con Xbox One, 360, Original"]
             },
            {
                "nombre": "Nintendo Switch - Modelo OLED",
                "precio_usd": 349, "precio_gs": 349 * USD_TO_GS,
                "colores": ["Blanco", "Rojo Ne√≥n/Azul Ne√≥n"],
                "almacenamiento": ["64GB internos (ampliable con microSD)"],
                "caracteristicas": ["Pantalla OLED vibrante de 7 pulgadas", "Modos de juego: TV, sobremesa, port√°til", "Joy-Con extra√≠bles", "Amplio cat√°logo de juegos exclusivos", "Soporte ajustable ancho"]
             }
        ],
         "tv": [
             {
                "nombre": "Samsung 65\" QN90D Neo QLED 4K TV", # Modelo hipot√©tico 2025
                "precio_usd": 2200, "precio_gs": 2200 * USD_TO_GS,
                "colores": ["Negro"], "tama√±o": ["65 pulgadas"],
                "caracteristicas": ["Tecnolog√≠a Quantum Mini LED", "Resoluci√≥n 4K UHD (3840x2160)", "Procesador NQ4 AI Gen2", "Tasa de refresco 120Hz (hasta 144Hz para gaming)", "Smart TV Tizen OS", "Sonido OTS+ (Object Tracking Sound+)"]
             },
             {
                "nombre": "LG 55\" C4 OLED evo 4K TV", # Modelo 2024 real
                "precio_usd": 1800, "precio_gs": 1800 * USD_TO_GS,
                "colores": ["Negro"], "tama√±o": ["55 pulgadas"],
                "caracteristicas": ["Panel OLED evo autoiluminado", "Resoluci√≥n 4K UHD", "Procesador Œ±9 AI Gen7", "Perfect Black, Contraste Infinito", "Dolby Vision, Dolby Atmos", "webOS 24 Smart TV", "Ideal para cine y gaming (G-Sync, FreeSync)"]
             },
              {
                "nombre": "Sony 75\" BRAVIA 7 (XR70) QLED 4K TV", # Modelo 2024 real
                "precio_usd": 2800, "precio_gs": 2800 * USD_TO_GS,
                "colores": ["Negro"], "tama√±o": ["75 pulgadas"],
                "caracteristicas": ["Panel QLED (Mini LED Backlight)", "Resoluci√≥n 4K UHD", "Procesador XR", "XR Backlight Master Drive", "Google TV", "Acoustic Multi-Audio+", "Perfect for PlayStation 5"]
              }
         ],
         "audio": [
             {
                "nombre": "Sony WH-1000XM6 Auriculares inal√°mbricos", # Modelo hipot√©tico
                "precio_usd": 399, "precio_gs": 399 * USD_TO_GS,
                "colores": ["Negro", "Plata", "Azul Noche"],
                "caracteristicas": ["Cancelaci√≥n de ruido l√≠der en la industria (mejorada)", "Nuevo dise√±o m√°s c√≥modo", "Procesador de audio V2 (hipot√©tico)", "Hasta 35 horas de bater√≠a (con NC)", "Conexi√≥n multipunto", "Audio Hi-Res inal√°mbrico (LDAC)"]
             },
             {
                "nombre": "Bose QuietComfort Ultra Headphones", # Modelo real
                "precio_usd": 429, "precio_gs": 429 * USD_TO_GS,
                "colores": ["Black", "White Smoke"],
                "caracteristicas": ["Cancelaci√≥n de ruido de clase mundial", "Bose Immersive Audio (audio espacial)", "Modo Aware (transparencia)", "Ajuste c√≥modo y estable", "Hasta 24 horas de bater√≠a"]
             },
             {
                "nombre": "JBL Charge 6 Altavoz Bluetooth port√°til", # Modelo hipot√©tico
                "precio_usd": 199, "precio_gs": 199 * USD_TO_GS,
                "colores": ["Negro", "Azul", "Rojo", "Verde Camuflado"],
                "caracteristicas": ["Sonido JBL Original Pro potente", "Hasta 25 horas de reproducci√≥n", "Resistente al agua y al polvo (IP67)", "Powerbank incorporado para cargar dispositivos", "PartyBoost (conectar m√∫ltiples altavoces JBL)"]
             },
              {
                 "nombre": "Sonos Era 300 Altavoz inteligente", # Modelo real
                 "precio_usd": 449, "precio_gs": 449 * USD_TO_GS,
                 "colores": ["Negro", "Blanco"],
                 "caracteristicas": ["Audio espacial con Dolby Atmos", "Seis drivers posicionados para dispersi√≥n de sonido", "Control por voz (Sonos Voice, Alexa)", "WiFi y Bluetooth", "Trueplay tuning (ajuste ac√∫stico)", "Ideal para m√∫sica y cine en casa (como traseros)"]
              }
         ],
        "accesorio": [
             {
                "nombre": "Apple AirPods Pro (2¬™ generaci√≥n) con estuche USB-C",
                "precio_usd": 249, "precio_gs": 249 * USD_TO_GS,
                "colores": ["Blanco"],
                "caracteristicas": ["Cancelaci√≥n Activa de Ruido mejorada", "Modo Ambiente Adaptativo", "Audio Espacial personalizado", "Chip H2", "Resistencia IP54 (auriculares y estuche)"]
            },
            {
                "nombre": "Samsung Galaxy Buds3 Pro", # Modelo hipot√©tico
                "precio_usd": 229, "precio_gs": 229 * USD_TO_GS,
                "colores": ["Phantom Black", "Phantom Silver", "Bora Purple"],
                "caracteristicas": ["Cancelaci√≥n de ruido inteligente", "Audio Hi-Fi 24 bits", "360 Audio con seguimiento de cabeza", "Dise√±o ergon√≥mico mejorado", "Resistencia IPX7"]
            },
            {
                "nombre": "Anker PowerCore 20000 PD Power Bank",
                "precio_usd": 50, "precio_gs": 50 * USD_TO_GS,
                "colores": ["Negro"],
                "caracteristicas": ["Capacidad 20,000mAh", "Power Delivery (PD) 20W USB-C", "PowerIQ USB-A", "Carga hasta 2 dispositivos simult√°neamente", "Compacto y fiable"]
             },
            {
                "nombre": "Logitech MX Master 3S Rat√≥n inal√°mbrico",
                "precio_usd": 99, "precio_gs": 99 * USD_TO_GS,
                "colores": ["Grafito", "Gris P√°lido"],
                "caracteristicas": ["Sensor √≥ptico 8K DPI", "Clics silenciosos", "Scroll electromagn√©tico MagSpeed", "Dise√±o ergon√≥mico", " multidispositivo (hasta 3)", "USB-C carga r√°pida"]
             }
        ]
        # A√±adir m√°s categor√≠as y productos aqu√≠ si es necesario
    }

# -------------------------------------------------------------------
# FUNCIONES DE APOYO
# -------------------------------------------------------------------
def generar_info_productos(productos: list) -> str:
    """Formatea la informaci√≥n de una lista de productos para mostrarla."""
    if not productos:
        return "No hay productos disponibles en esta categor√≠a por el momento."

    texto = []
    # Limitar la cantidad de productos mostrados por categor√≠a para no saturar
    MAX_PRODUCTOS_POR_CATEGORIA = 5
    for i, prod in enumerate(productos):
        if i >= MAX_PRODUCTOS_POR_CATEGORIA:
            texto.append(f"... y {len(productos) - MAX_PRODUCTOS_POR_CATEGORIA} m√°s. Preg√∫ntame si buscas algo espec√≠fico.")
            break

        precio_gs_f = f"{prod['precio_gs']:,.0f}".replace(",", ".")
        # Incluir RAM o Tama√±o si est√°n presentes
        detalles_extra = ""
        if 'ram' in prod:
            detalles_extra += f"   üß† RAM: {', '.join(prod['ram'])}\n"
        if 'tama√±o' in prod:
             detalles_extra += f"   üìè Tama√±o: {prod['tama√±o'] if isinstance(prod['tama√±o'], str) else ', '.join(prod['tama√±o'])}\n"

        texto.append(
            f"üìå **{prod['nombre']}**\n"
            f"   üíµ Precio: ${prod['precio_usd']:.2f}$ USD / ${precio_gs_f}$ Gs\n"
            f"   üé® Colores: {', '.join(prod['colores'])}\n"
            f"   üíæ Almacenamiento: {', '.join(prod.get('almacenamiento', ['N/D']))}\n"
            f"{detalles_extra}" # A√±ade RAM/Tama√±o si existe
            f"   ‚öôÔ∏è Destacado: {'; '.join(prod['caracteristicas'][:3])}..." # Muestra las 3 primeras caracter√≠sticas
        )
    return "\n\n".join(texto)


def buscar_por_caracteristicas(pregunta_lower: str, caracteristicas_solicitadas: set, catalogo: dict) -> str:
    """Busca productos que coincidan con las caracter√≠sticas solicitadas."""
    resultados_productos = []

    for categoria, productos in catalogo.items():
        for prod in productos:
            # Combina nombre, caracter√≠sticas y otros detalles en un texto para buscar
            texto_producto = f"{prod['nombre'].lower()} {' '.join(prod['caracteristicas']).lower()}"
            if 'almacenamiento' in prod: texto_producto += f" {' '.join(prod.get('almacenamiento', [])).lower()}"
            if 'colores' in prod: texto_producto += f" {' '.join(prod.get('colores', [])).lower()}"
            if 'tama√±o' in prod: texto_producto += f" {prod['tama√±o'] if isinstance(prod['tama√±o'], str) else ' '.join(prod.get('tama√±o', [])).lower()}"
            if 'ram' in prod: texto_producto += f" {' '.join(prod.get('ram', [])).lower()}"

            # Comprobar si *todas* las caracter√≠sticas solicitadas est√°n en el texto del producto o pregunta
            # O si alguna caracter√≠stica clave est√° directamente en la pregunta
            mencionadas_en_producto = all(caract in texto_producto for caract in caracteristicas_solicitadas)
            mencionadas_en_pregunta = any(caract in pregunta_lower for caract in caracteristicas_solicitadas)

            # Priorizar si se mencionan caracter√≠sticas espec√≠ficas en la pregunta
            if mencionadas_en_pregunta and any(caract in texto_producto for caract in caracteristicas_solicitadas):
                 # Podr√≠amos refinar esto para que solo a√±ada si la caracter√≠stica espec√≠fica est√° en el producto
                if any(caract in texto_producto for caract in caracteristicas_solicitadas if caract in pregunta_lower):
                     resultados_productos.append(prod) # A√±ade el diccionario completo

            # Si no se menciona espec√≠ficamente en la pregunta, pero todas las caracter√≠sticas est√°n en el producto
            elif mencionadas_en_producto and not mencionadas_en_pregunta:
                 resultados_productos.append(prod) # A√±ade el diccionario completo

    # Eliminar duplicados si un producto coincide por varias v√≠as
    resultados_unicos = []
    nombres_vistos = set()
    for prod in resultados_productos:
        if prod['nombre'] not in nombres_vistos:
            resultados_unicos.append(prod)
            nombres_vistos.add(prod['nombre'])

    # Formatear los resultados usando la funci√≥n existente
    if resultados_unicos:
        # Aqu√≠ podr√≠as llamar a generar_info_productos con la lista filtrada
        # return generar_info_productos(resultados_unicos[:5]) # Limitar a 5 resultados
        # O un formato m√°s simple si prefieres:
        texto_resultados = []
        for prod in resultados_unicos[:5]: # Limitar a 5 resultados
             precio_gs_f = f"{prod['precio_gs']:,.0f}".replace(",", ".")
             categoria_prod = next((cat for cat, prods in catalogo.items() if prod in prods), "Desconocida")
             texto_resultados.append(f"‚Ä¢ **{prod['nombre']}** ({categoria_prod.capitalize()}) - Precio: ${prod['precio_usd']:.2f}$ USD / ${precio_gs_f}$ Gs. *Caracter√≠sticas clave*: {', '.join(prod['caracteristicas'][:2])}...")
        if len(resultados_unicos) > 5:
             texto_resultados.append("... y algunos m√°s.")
        return "\n".join(texto_resultados)

    return "" # Devuelve vac√≠o si no hay resultados


# -------------------------------------------------------------------
# LOG
# -------------------------------------------------------------------

def guardar_prompt_log(prompt_completo):
    # Crear carpeta "log" si no existe
    os.makedirs("log", exist_ok=True)

    # Nombre del archivo basado en la fecha actual
    fecha = datetime.datetime.now().strftime("%Y-%m-%d")
    archivo = f"log/promt_log_{fecha}.txt"

    # Agregar contenido con timestamp
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_content = f"\n\n--- PROMPT GENERADO PARA EL MODELO ({timestamp}) ---\n"
    log_content += prompt_completo
    log_content += "\n--- FIN DEL PROMPT ---\n"

    with open(archivo, "a", encoding="utf-8") as f:
        f.write(log_content)